[{"id":"en/about/faq.html","title":"Lite XL - FAQ","category":["about"],"content":"FAQ\nCan I get smart autocompletion (intellisense/LSP)?\nCheck out the LSP plugin.\nWhere is the integrated terminal?\nYou can try lite-xl-terminal.\nTabs and indent size?\nIn your user config (the cog icon in the file tree):\nconfig.tab_type = \"soft\" -- soft for spaces, hard for real tabs (\\t)\nconfig.indent_size = 4\\t-- 4 spaces\nHow to bind commands to keys?\nlocal keymap = require \"core.keymap\"\nkeymap.add { [\"ctrl+escape\"] = \"core:quit\" }\nHow to unbind commands for certain keys?\n-- the second parameter lets you override commands for certain keys\n-- in this case it maps it to nothing\nkeymap.add({ [\"ctrl+escape\"] = {} }, true)\nHow to get commands for those keybinds?\nYou can search for commands in the command palette.\nFor each command, replace the spaces in the right side with dashes.\nFor example: Core: Find Command → core:find-command\nWhat version of Lua does Lite XL use?\nLua 5.4.\nVim mode?\nYou need to vibe.\nPlugin recommendations\nJust in case you don't want to comb through our plugin repository,\nthese are a list of plugins that just makes Lite XL a lot more pleasant.\nPlugin\tUse case\nautoinsert\tAutomatically insert closing brackets and quotes\nbracketmatch\tHighlight matching brackets\nephemeral_tabs\tEphemeral tabs (previewing files without creating multiple tabs)\ngitdiff_highlight\tGit diff gutter\nlint+\tLinter support\nminimap\tMinimap\nselectionhighlight\tHighlight code that matches the selection\nlite-xl-discord\tDiscord rich presence\nWhere's feature X? How about Y?\nYou can get more info in the Features page."},{"id":"en/about/contributors.html","title":"Lite XL - Contributors","category":["about"],"content":"Contributors\nName\tContributions\nrxi\tOriginal development of lite editor.\nFrancesco\tCreator of lite-xl fork from rxi/lite.\nTakase\tNagView and X Window database resource query for Xft.dpi setting.\nNils Kvist\tPopup window replacement with CommandView dialog.\nliquidev\tTab style and animations improvements.\nAdam\tMulti-language syntax highlighting and many other improvements.\nCukmekerb\tSyntax highlighting improvements.\nJanis-Leuenberger\tAdd keymap bindings help file and macOS testing.\nMat Mariani\tHelp for macOS port. Some resources taken from mathewmariani/lite-macos.\ndaubaris\tInitial implementation of Xft.dpi query using xrdb command.\nRobert Štojs\tContinuos integration configuration."},{"id":"en/about/features.html","title":"Lite XL - Features","category":["about"],"content":"Features\nCurrently, Lite XL offers a lot of features out of the box.\nCross-Platform\nWe currently support Windows, Linux and MacOS (with Retina display support).\nLightweight\nWe are currently around 3MB in size and takes about 10MB in RAM (can be lower). No Electron / WebView involved. The whole thing is just Lua running on a rendering engine.\nExtensible\nWhile the editor is minimal by default, it is very extensible using Lua. In fact, a lot of features are provided by plugins. For example, VSC-like intellisense\nBetter font rendering\nThe editor looks good in screen of any sizes. Some other options are also configurable, such as hinting and antialiasing.\nMulti-cursor editing\nYou can now place multiple cursors by ctrl + lclick on lines or ctrl + shift + up or ctrl + shift + down.\nHere are some features that aren't implemented with the rationales behind it.\nSome of these may be implemented via plugins.\nWe encourage you to give it a shot.\nHardware accelerated rendering\ntl;dr -\\tfranko stated that he isn't considering using OpenGL due to the skills and work involved.\nHardware acceleration was brought up in this discussion.\nTakase had made 2 attempts at this - at first using NanoVG and then forcing SDL to use GPU rendering.\nIn both attempts, the performance gains at best is negligible, while at worst its completely unusable.\nRight now, we decided to focus on optimizing the software renderer and various part of Lua code.\nSystem fonts\nThis is painful because various systems has their own mechanism of managing fonts.\nFor now, users can use the fontconfig plugin.\nFontconfig is widely available on Linux and installable on MacOS, while Windows builds are available.\nIn the future, we might consider adding API to read font metadata, allowing us to write a fontconfig alternative in Lua. (no promises here)\nOpening UNC paths on Windows (network drives, accessing WSL2 files from Windows)\nOur path handling code can only handle POSIX and Windows paths.\nWe also aren't sure how Lite XL will behave in these scenarios.\nInter-window communication (dragging tabs between windows and other magic)\nThis is by far the hardest to achieve.\nLite XL has no intention to link to any widget toolkits (Qt and GTK) which are required for these features.\nAn alternative approach is to create our own IPC mechanism, but that's reinventing the wheel.\nIntegrated terminal\nA terminal is complex to implement.\nThere are projects that can be ported to Lua, such as xterm.js.\nIf someone is interested, they can do so."},{"id":"en/about/screenshots.html","title":"Lite XL - Screenshots","category":["about"],"content":"Screenshots\nScreenshot 1 /assets/img/editor.png\nScreenshot 2 /assets/img/editor2.png"},{"id":"en/about/index.html","title":"Lite XL - About","category":["about"],"content":"About\nThese pages contain information about Lite XL's features, screenshots and developers. It also contains a FAQ section.\nContributors\nFAQ\nFeatures\nScreenshots"},{"id":"en/404.html","title":"Lite XL - Not Found","category":[],"content":"Not Found\nThis page couldn't be found. Please note, that the site is undergoing testing at present, so pages may be missing/moved."},{"id":"en/tutorials/syntax-highlighting.html","title":"Lite XL - Syntax Highlighting","category":["tutorials"],"content":"Syntax Highlighting\nHow to create syntax highlighting plugins for Lite XL\nSyntax highlighting plugins for Lite XL are Lua files. These define some patterns or regular expressions that\nmatch different parts of a given language, assigning token types to each match.\nThese different token types are then given different colors by your chosen color scheme.\nLike other plugins, syntax definitions are sourced from the following folders, in order:\n/usr/share/lite-xl/plugins/\n$HOME/.config/lite-xl/plugins/\nNOTE: The exact location of these folders will depend on your OS and installation method. For example, on Windows, the variable $USERPROFILE will be used instead of $HOME.\nThe user module folder for Lite XL can generally be found in these places on different OSes:\nWindows: C:\\Users\\(username)\\.config\\lite-xl\nMacOS: /Users/(usernmame)/.config/lite-xl\nLinux: /home/(username)/.config/lite-xl\nSo, to create a new syntax definition on Linux, you can just create a .lua file in your $HOME/.config/lite-xl/plugins/ folder.\nWhat syntax token types are supported?\nThe supported syntax token types, defined by lite-xl/core/style.lua, are:\nnormal\nsymbol\ncomment\nkeyword\nkeyword2\nnumber\nliteral\nstring\noperator\nfunction\nIn your syntax highlighting plugin, you write patterns to match parts of the language syntax, assigning these token types to matches. You don't have to use them all - just use as many as you need for your language.\nLet's walk through an example syntax definition and see how this works.\nExample syntax: ssh config files\nThis is a small, simple example of a syntax definition. It's intended to highlight SSH Config files and looks like this:\n-- mod-version:2 -- lite-xl 2.0\nlocal syntax = require \"core.syntax\"\nsyntax.add {\n\\tfiles = { \"sshd?/?_?config$\" },\n\\tcomment = '#',\n\\tpatterns = {\n\\t{ pattern = \"#.*\\n\",\\ttype = \"comment\"\\t},\n\\t{ pattern = \"%d+\",\\ttype = \"number\"\\t},\n\\t{ pattern = \"[%a_][%w_]*\",\\ttype = \"symbol\"\\t},\n\\t{ pattern = \"@\",\\ttype = \"operator\" },\n\\t},\n\\tsymbols = {\n\\t-- ssh config\n\\t[\"Host\"]\\t= \"function\",\n\\t[\"ProxyCommand\"]\\t= \"function\",\n\\t[\"HostName\"]\\t= \"keyword\",\n\\t[\"IdentityFile\"]\\t= \"keyword\",\n\\t...\n\\t-- sshd config\n\\t[\"Subsystem\"]\\t= \"keyword2\",\n\\t-- Literals\n\\t[\"yes\"]\\t= \"literal\",\n\\t[\"no\"]\\t= \"literal\",\n\\t[\"any\"]\\t= \"literal\",\n\\t[\"ask\"]\\t= \"literal\",\n\\t},\n}\nLet's take each section in turn and see how it works.\nHeader\nThe first line is a Lua comment & tells Lite XL which version this plugin requires. The second imports the core.syntax module\nfor us to use:\n-- mod-version:2 -- lite-xl 2.0\nlocal syntax = require \"core.syntax\"\nWe then add a syntax definition to lite, using syntax.add {...}. The contents of this definition are covered next.\nFiles\nThe files property tells Lite XL which files this syntax should be used for. This is a Lua pattern that matches against the full path of the file being opened. For example, to match against Markdown files - with either a .md or a .markdown extension,\nyou could do this:\nfiles = { \"%.md$\", \"%.markdown$\" },\nIn our original example, we match against the end of the path rather than the extension, because SSH config files don't have extensions - and we don't want to match all config files. We expect the path for SSH config files to look something like one of these:\n~/.ssh/config\n/etc/ssh/ssh_config\n/etc/ssh/sshd_config\nThis pattern matches paths that look like that:\nfiles = { \"sshd?/?_?config$\" },\nComment\nThe comment property doesn't define which parts of the syntax are comments - see Patterns for that, below. This property tells Lite XL which character to insert at the start of selected lines when you press ctrl+/.\nYou can also use block_comment to tell Lite XL how to create multiline / block comments.\nPatterns\nA given piece of text can only match one pattern. Once Lite XL decides that a piece of text matches a pattern, it will assign that token type to that piece and move on.\nPatterns are tested in the order that they are written in the syntax definition, so the first match will win.\nEach pattern takes one of the following forms:\nSimple Pattern\n{ pattern = \"#.*\\n\",\\ttype = \"comment\" },\nThis form matches the line against the pattern and if it matches, assigns the matching text to the given token type - comment, in this case.\nStart & End Pattern\n{ pattern = { \"%[\", \"%]\" }, type = \"keyword\" },\nThis form has two patterns - one that matches against the start of the range and one that matches against the end. Everything between the start and the end will be assigned the given token type.\nStart & End Pattern, with Escape\n{ pattern = { '\"', '\"', '\\\\' }, type = \"string\" },\nThis is the same as the previous form, but with an extra, third parameter.\nThe 3rd part, the '\\\\' part in this example, specifies the character that allows escaping the closing match.\nFor more on Lua Patterns, see: Lua Pattern Reference\nIf you need to use PCRE Regular Expressions, instead of Lua Patterns, you can use the regex keyword here, instead of pattern.\nSymbols\nThis is not related to the symbol token type.\nThe symbols section allows you to assign token types to particular keywords or strings - usually reserved words in the language you are highlighting.\nThe token type in this section always take precedence over token types declared in patterns.\nFor example this highlights Host using the function token type, HostName as a keyword and yes, no, any & ask as a literal:\n[\"Host\"]\\t= \"function\",\n[\"HostName\"]\\t= \"keyword\",\n[\"yes\"]\\t= \"literal\",\n[\"no\"]\\t= \"literal\",\n[\"any\"]\\t= \"literal\",\n[\"ask\"]\\t= \"literal\",\nTips: double check your patterns!\nThere are a few common mistakes that can be made when using the symbols table in conjunction with patterns.\nCase 1: Spaces between two symbols tokens\nLet's have an example:\n{ pattern = \"[%a_][%w_]+%s+()[%a_][%w_]+\", type = { \"keyword2\", \"symbol\" } }\nLet's explain the pattern a bit (omitting the empty parentheses):\n[%a_] = any alphabet and underscore\n[%w_] = any alphabet, numbers and underscore\n%s = any whitespace character\nWORD =\n\\t[%a_] followed by (1 or more [%w_])\npattern =\n\\tWORD followed by (one or more %s) followed by WORD\nAfterwards, you add an entry [\"my\"] = \"literal\" in the symbols table.\nYou test the syntax with my function found that \"my\" isn't highlighted as literal. Why did that happen?\nsymbols table requires an exact match.\nIf you look carefully, the empty parentheses (()) is placed after the space!\nThis tells Lite XL that WORD followed by (one or more %s) is a token, which will match my (note the space in the match).\nThe fix is to add a normal token for the whitespace between the two tokens:\n{ pattern = \"[%a_][%w_]+()%s+()[%a_][%w_]+\", type = { \"keyword2\", \"normal\", \"symbol\" } }\nCase 2: Patterns & symbols tokens\nOne might assume that Lite XL magically matches text against the symbols table. This is not the case.\nIn some languages, people may add a generic pattern to delegate the matching to the symbols table.\n{ pattern = \"[%a_][%w_]*\", \"symbol\" }\nHowever, the symbols table may look like this:\nsymbols = {\n\\t[\"my-symbol\"] = \"function\",\n\\t[\"..something_else\"] = \"literal\"\n}\n\"my-symbol contains a dash (-) and \"..something_else\" contains 2 dots (.).\nNone of the characters are matched by [%a_][%w_]*!\nBeware of the text you intend to match in the symbols table.\nIf you want to use it, you need to ensure that it can matched by one of the patterns.\nThe correct patterns are:\n{ pattern = \"[%a_][%w%-_]*\", \"symbol\" },\n{ pattern = \"%.%.[%a_][%w_]*\", \"symbol\" },\nTesting Your New Syntax\nTo test your new syntax highlighting you need to do two things:\nReload the Lite XL core\nLoad a file in your chosen language and see how it looks\nTo reload the core, you can either restart Lite XL, or reload the core from the command palette, without needing to restart.\nTo do this, type ctrl+shit+p to show the command palette, then select Core: Restart (or type crr or something similar to match it), then press Enter. You will need to restart the core after any changes you make to the syntax highlighting definition.\nExample advanced syntax: Markdown\nNote: This example has features from 2.1. It is not compatible with older versions of lite-xl.\nNot all languages are as simple as SSH config files. Markup languages like HTML and Markdown are especially hard to parse correctly. Here's the markdown syntax file in its full glory:\n-- mod-version:3\nlocal syntax = require \"core.syntax\"\nlocal style = require \"core.style\"\nlocal core = require \"core\"\nlocal initial_color = style.syntax[\"keyword2\"]\n-- Add 3 type of font styles for use on markdown files\nfor _, attr in pairs({\"bold\", \"italic\", \"bold_italic\"}) do\n\\tlocal attributes = {}\n\\tif attr ~= \"bold_italic\" then\n\\tattributes[attr] = true\n\\telse\n\\tattributes[\"bold\"] = true\n\\tattributes[\"italic\"] = true\n\\tend\n\\t-- no way to copy user custom font with additional attributes :(\n\\tstyle.syntax_fonts[\"markdown_\"..attr] = renderer.font.load(\n\\tDATADIR .. \"/fonts/JetBrainsMono-Regular.ttf\",\n\\tstyle.code_font:get_size(),\n\\tattributes\n\\t)\n\\t-- also add a color for it\n\\tstyle.syntax[\"markdown_\"..attr] = style.syntax[\"keyword2\"]\nend\nlocal in_squares_match = \"^%[%]\"\nlocal in_parenthesis_match = \"^%(%)\"\nsyntax.add {\n\\tname = \"Markdown\",\n\\tfiles = { \"%.md$\", \"%.markdown$\" },\n\\tblock_comment = { \"<!--\", \"-->\" },\n\\tspace_handling = false, -- turn off this feature to handle it our selfs\n\\tpatterns = {\n\\t---- Place patterns that require spaces at start to optimize matching speed\n\\t---- and apply the %s+ optimization immediately afterwards\n\\t-- bullets\n\\t{ pattern = \"^%s*%*%s\",\\ttype = \"number\" },\n\\t{ pattern = \"^%s*%-%s\",\\ttype = \"number\" },\n\\t{ pattern = \"^%s*%+%s\",\\ttype = \"number\" },\n\\t-- numbered bullet\n\\t{ pattern = \"^%s*[0-9]+[%.%)]%s\",\\ttype = \"number\" },\n\\t-- blockquote\n\\t{ pattern = \"^%s*>+%s\",\\ttype = \"string\" },\n\\t-- alternative bold italic formats\n\\t{ pattern = { \"%s___\", \"___%f[%s]\" },\\ttype = \"markdown_bold_italic\" },\n\\t{ pattern = { \"%s__\", \"__%f[%s]\" },\\ttype = \"markdown_bold\" },\n\\t{ pattern = { \"%s_[%S]\", \"_%f[%s]\" },\\ttype = \"markdown_italic\" },\n\\t-- reference links\n\\t{\n\\tpattern = \"^%s*%[%^()[\"..in_squares_match..\"]+()%]: \",\n\\ttype = { \"function\", \"number\", \"function\" }\n\\t},\n\\t{\n\\tpattern = \"^%s*%[%^?()[\"..in_squares_match..\"]+()%]:%s+.+\\n\",\n\\ttype = { \"function\", \"number\", \"function\" }\n\\t},\n\\t-- optimization\n\\t{ pattern = \"%s+\",\\ttype = \"normal\" },\n\\t---- HTML rules imported and adapted from language_html\n\\t---- to not conflict with markdown rules\n\\t-- Inline JS and CSS\n\\t{\n\\tpattern = {\n\\t\"<%s*[sS][cC][rR][iI][pP][tT]%s+[tT][yY][pP][eE]%s*=%s*\" ..\n\\t\"['\\\"]%a+/[jJ][aA][vV][aA][sS][cC][rR][iI][pP][tT]['\\\"]%s*>\",\n\\t\"<%s*/[sS][cC][rR][iI][pP][tT]>\"\n\\t},\n\\tsyntax = \".js\",\n\\ttype = \"function\"\n\\t},\n\\t{\n\\tpattern = {\n\\t\"<%s*[sS][cC][rR][iI][pP][tT]%s*>\",\n\\t\"<%s*/%s*[sS][cC][rR][iI][pP][tT]>\"\n\\t},\n\\tsyntax = \".js\",\n\\ttype = \"function\"\n\\t},\n\\t{\n\\tpattern = {\n\\t\"<%s*[sS][tT][yY][lL][eE][^>]*>\",\n\\t\"<%s*/%s*[sS][tT][yY][lL][eE]%s*>\"\n\\t},\n\\tsyntax = \".css\",\n\\ttype = \"function\"\n\\t},\n\\t-- Comments\n\\t{ pattern = { \"<!%-%-\", \"%-%->\" },\\ttype = \"comment\" },\n\\t-- Tags\n\\t{ pattern = \"%f[^<]![%a_][%w_]*\",\\ttype = \"keyword2\" },\n\\t{ pattern = \"%f[^<][%a_][%w_]*\",\\ttype = \"function\" },\n\\t{ pattern = \"%f[^<]/[%a_][%w_]*\",\\ttype = \"function\" },\n\\t-- Attributes\n\\t{\n\\tpattern = \"[a-z%-]+%s*()=%s*()\\\".-\\\"\",\n\\ttype = { \"keyword\", \"operator\", \"string\" }\n\\t},\n\\t{\n\\tpattern = \"[a-z%-]+%s*()=%s*()'.-'\",\n\\ttype = { \"keyword\", \"operator\", \"string\" }\n\\t},\n\\t{\n\\tpattern = \"[a-z%-]+%s*()=%s*()%-?%d[%d%.]*\",\n\\ttype = { \"keyword\", \"operator\", \"number\" }\n\\t},\n\\t-- Entities\n\\t{ pattern = \"&#?[a-zA-Z0-9]+;\",\\ttype = \"keyword2\" },\n\\t---- Markdown rules\n\\t-- math\n\\t{ pattern = { \"%$%$\", \"%$%$\", \"\\\\\"\\t},\\ttype = \"string\", syntax = \".tex\"},\n\\t{ pattern = { \"%$\", \"%$\", \"\\\\\" },\\ttype = \"string\", syntax = \".tex\"},\n\\t-- code blocks\n\\t{ pattern = { \"```c++\", \"```\" },\\ttype = \"string\", syntax = \".cpp\" },\n\\t-- ... there's some other patterns here, but I removed them for brevity\n\\t{ pattern = { \"```lobster\", \"```\" },\\ttype = \"string\", syntax = \".lobster\" },\n\\t{ pattern = { \"```\", \"```\" },\\ttype = \"string\" },\n\\t{ pattern = { \"``\", \"``\" },\\ttype = \"string\" },\n\\t{ pattern = { \"%f[\\\\`]%`[%S]\", \"`\" },\\ttype = \"string\" },\n\\t-- strike\n\\t{ pattern = { \"~~\", \"~~\" },\\ttype = \"keyword2\" },\n\\t-- highlight\n\\t{ pattern = { \"==\", \"==\" },\\ttype = \"literal\" },\n\\t-- lines\n\\t{ pattern = \"^%-%-%-+\\n\",\\ttype = \"comment\" },\n\\t{ pattern = \"^%*%*%*+\\n\",\\ttype = \"comment\" },\n\\t{ pattern = \"^___+\\n\",\\ttype = \"comment\" },\n\\t-- bold and italic\n\\t{ pattern = { \"%*%*%*%S\", \"%*%*%*\" },\\ttype = \"markdown_bold_italic\" },\n\\t{ pattern = { \"%*%*%S\", \"%*%*\" },\\ttype = \"markdown_bold\" },\n\\t-- handle edge case where asterisk can be at end of line and not close\n\\t{\n\\tpattern = { \"%f[\\\\%*]%*[%S]\", \"%*%f[^%*]\" },\n\\ttype = \"markdown_italic\"\n\\t},\n\\t-- alternative bold italic formats\n\\t{ pattern = \"^___[%s%p%w]+___%s\" ,\\ttype = \"markdown_bold_italic\" },\n\\t{ pattern = \"^__[%s%p%w]+__%s\" ,\\ttype = \"markdown_bold\" },\n\\t{ pattern = \"^_[%s%p%w]+_%s\" ,\\ttype = \"markdown_italic\" },\n\\t-- heading with custom id\n\\t{\n\\tpattern = \"^#+%s[%w%s%p]+(){()#[%w%-]+()}\",\n\\ttype = { \"keyword\", \"function\", \"string\", \"function\" }\n\\t},\n\\t-- headings\n\\t{ pattern = \"^#+%s.+\\n\",\\ttype = \"keyword\" },\n\\t-- superscript and subscript\n\\t{\n\\tpattern = \"%^()%d+()%^\",\n\\ttype = { \"function\", \"number\", \"function\" }\n\\t},\n\\t{\n\\tpattern = \"%~()%d+()%~\",\n\\ttype = { \"function\", \"number\", \"function\" }\n\\t},\n\\t-- definitions\n\\t{ pattern = \"^:%s.+\",\\ttype = \"function\" },\n\\t-- emoji\n\\t{ pattern = \":[a-zA-Z0-9_%-]+:\",\\ttype = \"literal\" },\n\\t-- images and link\n\\t{\n\\tpattern = \"!?%[!?%[()[\"..in_squares_match..\"]+()%]%(()[\"..in_parenthesis_match..\"]+()%)%]%(()[\"..in_parenthesis_match..\"]+()%)\",\n\\ttype = { \"function\", \"string\", \"function\", \"number\", \"function\", \"number\", \"function\" }\n\\t},\n\\t{\n\\tpattern = \"!?%[!?%[?()[\"..in_squares_match..\"]+()%]?%]%(()[\"..in_parenthesis_match..\"]+()%)\",\n\\ttype = { \"function\", \"string\", \"function\", \"number\", \"function\" }\n\\t},\n\\t-- reference links\n\\t{\n\\tpattern = \"%[()[\"..in_squares_match..\"]+()%] *()%[()[\"..in_squares_match..\"]+()%]\",\n\\ttype = { \"function\", \"string\", \"function\", \"function\", \"number\", \"function\" }\n\\t},\n\\t{\n\\tpattern = \"!?%[%^?()[\"..in_squares_match..\"]+()%]\",\n\\ttype = { \"function\", \"number\", \"function\" }\n\\t},\n\\t-- url's and email\n\\t{\n\\tpattern = \"<[a-zA-Z0-9_.+-]+@[a-zA-Z0-9-]+%.[a-zA-Z0-9-.]+>\",\n\\ttype = \"function\"\n\\t},\n\\t{ pattern = \"<https?://%S+>\",\\ttype = \"function\" },\n\\t{ pattern = \"https?://%S+\",\\ttype = \"function\" },\n\\t-- optimize consecutive dashes used in tables\n\\t{ pattern = \"%-+\",\\ttype = \"normal\" },\n\\t},\n\\tsymbols = { },\n}\n-- Adjust the color on theme changes\ncore.add_thread(function()\n\\twhile true do\n\\tif initial_color ~= style.syntax[\"keyword2\"] then\n\\tfor _, attr in pairs({\"bold\", \"italic\", \"bold_italic\"}) do\n\\tstyle.syntax[\"markdown_\"..attr] = style.syntax[\"keyword2\"]\n\\tend\n\\tinitial_color = style.syntax[\"keyword2\"]\n\\tend\n\\tcoroutine.yield(1)\n\\tend\nend)\nSyntax fonts (Since 1.16.10)\nThe syntax allows users to set different font styles (bold, italic, etc.) for different patterns.\nTo change the font style of a token, add a Font to style.syntax_fonts[token_type].\nFor example:\n-- will ensure every \"fancysyntax_fancy_token\" is italic\nstyle.syntax_fonts[\"fancysyntax_fancy_token\"] = renderer.font.load(\"myfont.ttf\", 14 * SCALE, { italic = true })\nThe markdown example automates this with a for loop.\nThe limitations here are that fonts cannot be copied with different attributes, thus the font path has to be hardcoded.\nOther than that, abusing style.syntax_fonts may lead to slow performance and high memory consumption.\nThis is very obvious when the user tries to resize the editor with ctrl-scroll or ctrl+ and ctrl-.\nPlease use it in moderation.\nSpace handling (v2.1 (upcoming) / master)\nBy default, Lite XL prepends a pattern { pattern = \"%s+\", type = \"normal\" } to the syntax.\nThis improves the performance drastically on lines that starts with whitespaces (eg. heavily indented lines)\nby matching the whitespace before other patterns in order to prevent Lite XL from iterating the entire syntax.\nHowever, there may be syntaxes that require matching spaces (eg. Markdown with indented blocks)\nso this can be disabled by setting space_handling to false.\nTo keep the space handling optimization or to support older versions of Lite XL,\n{ pattern = \"%s+\", type = \"normal\" } can be added after patterns that require space.\nSimple patterns with multiple tokens (v1.16.10)\nThis is an excerpt taken from the markdown plugin:\nlocal in_squares_match = \"^%[%]\"\n-- reference links\n{\n\\tpattern = \"^%s*%[%^()[\"..in_squares_match..\"]+()%]: \",\n\\ttype = { \"function\", \"number\", \"function\" }\n},\nSometimes it makes sense to highlight different parts of a pattern differently.\nAn empty parentheses (()) in Lua patterns will return the position of the text in the parentheses.\nThis will tell Lite XL when to change the type of token.\nFor instance, ^%s*%[%^ is \"function\", [\"..in_squares_match..\"]+ is \"number\" and %]: is \"function\".\nSubsyntaxes (Since v1.16.10)\nLite XL supports embedding another syntax into the existing syntax.\nThis is used to support code blocks inside the markdown syntax.\nFor example:\nlua\n{ pattern = { \"cpp\", \"\" },\\ttype = \"string\", syntax = \".cpp\" },\nThis would highlight `` cpp `` and `` `with\"string\"while everything inside them will be highlighted with a syntax that matches\".cpp\"`."},{"id":"en/tutorials/simple-plugin.html","title":"Lite XL - Simple Plugin","category":["tutorials"],"content":"Simple Plugin\nWhat is Simple?\nSimple is a very basic plugin written with the intention of introducing developers\nwho are new to Lite XL to the process of writing plugins for the editor.\nWhat does the plugin do?\nThe plugin displays a message (that is taken as input from the user) at the top\nright corner of the editor window. It also allows the user to toggle\nthe visibility of the message.\nI can't write Lua!\nIf you come from other programming languages, take a look at Lua cheatsheet.\nIf you're new to programming, you can read this.\nFormat of the tutorial\nThe code contains comments detailing what most (if not all)\nof the code in the file does.\nThe code :\n-- mod-version:3\n-- you MUST put mod-version:x on the first line of your plugin\n-- mod-version usually maps to lite-xl releases (eg. mod-version: 2 == lite-xl 2.0)\n-- lite-xl won't load the plugin if the mod-version mismatches\n-----------------------------------------------------------------------\n-- NAME\\t: Simple\n-- DESCRIPTION: A simple guide on how to make your first Lite XL plugin\n-- AUTHOR\\t: Ashwin Godbole (aelobdog)\n-- GOALS\\t: To render some text inside the editor\n-----------------------------------------------------------------------\n-- Disclaimer :\n-- I am not a lua developer, and my knowledge about writing plugins for\n-- Lite XL is very limited. This file serves the purpose of helping the\n-- reader get started with plugin development for Lite XL, and therefore\n-- demonstrates only some very basic features. For more complex plugin\n-- development, be sure to check out the source code of some other\n-- plugins after going through this file.\n-----------------------------------------------------------------------\n-- Before we start writing any code for the plugin, we must import the\n-- required modules from the \"core\" package.\n-- the \"core\" module\nlocal core = require \"core\"\n-- the \"command\" module will help us register commands for our plugin.\nlocal command = require \"core.command\"\n-- the \"style\" module will allow us to use styling options\nlocal style = require \"core.style\"\n-- the \"config\" module will be used to store certain things like colors\n-- and functions\nlocal config = require \"core.config\"\n-- the \"keymap\" module will allow us to set keybindings for our commands\nlocal keymap = require \"core.keymap\"\n-- since we want to modify RootView, we'll need to require it first\nlocal RootView = require \"core.rootview\"\n-----------------------------------------------------------------------\n-- per-plugin config must stay in config.plugins.(plugin name)\nconfig.plugins.simple = {}\n-- colors are just three or four comma separated values (RGBA) (range 0 - 255)\n-- put inside of '{ }'. We will add our color to the config module.\nconfig.plugins.simple.text_color = {200, 140, 220} -- or use `{ common.color \"#C88CDC\" }`\n-----------------------------------------------------------------------\n-- Let's create a function to calculate the coordinates of our text.\n-- While we're at it, let's add our function to the `config` module.\n-- We'll take the message we want to display as the argument to the\n-- function to determine the x and y coordinates of the text.\nfunction config.plugins.simple.get_text_coordinates(message)\n\\t-- For this plugin, we want to display the text on the top right\n\\t-- corner of the screen. For this, we need to know the editor's width\n\\t-- and height.\n\\t-- The current font's size can be obtained from the \"style\" module.\n\\t-- The editor's dimensions can be obtained by\n\\t--\\t1. WIDTH\\t: core.root_view.size.x\n\\t--\\t2. HEIGHT : core.root_view.size.y\n\\tlocal message_width = style.code_font:get_width(message..\" \")\n\\tlocal font_height = style.code_font:get_size()\n\\tlocal x = core.root_view.size.x - message_width\n\\tlocal y = font_height / 2\n\\treturn x, y\nend\n-----------------------------------------------------------------------\n-- Let's now get to actually drawing the text inside the editor.\n-- In order to \"inject\" our own code to draw text,\n-- we'll need to save the original draw function\n-- We'll save `RootView.draw` to a variable we call `parent_draw`\nlocal parent_draw = RootView.draw\n-- Now let's overload the original definition of `draw` in RootView\n-- by redefining the function.\nfunction RootView:draw()\n\\t-- We call the parent's function to keep the editor functional...\n\\t-- obviously we must still draw all the other stuff !\n\\t-- So we call the `parent_draw` function before doing anything else.\n\\tparent_draw(self)\n\\t-- we'll add an option to toggle the message on and off. let's use a\n\\t-- boolean variable to keep track of whether we want to display the\n\\t-- message or not.\n\\tif config.plugins.simple.show_my_message then\n\\t-- We'll be getting the message to display as input from the user\n\\t-- later. We'll store that user input in `config.plugins.simple.hw_message`.\n\\t-- (NOTE: this variable does not come in-built in lite-xl;\n\\t--\\tit is a variable that we will define later.)\n\\t-- let's store the value of config.plugins.simple.hw_message in a local variable\n\\t-- `message` in case config.plugins.simple.hw_message we set the message to\n\\t-- \"message not set yet!\"\n\\tlocal message\n\\tif config.plugins.simple.hw_message then\n\\tmessage = config.plugins.simple.hw_message\n\\telse\n\\tmessage = \"Message not set yet !\"\n\\tend\n\\t-- let's get the coordinates for our text\n\\tlocal x, y = config.plugins.simple.get_text_coordinates(message)\n\\t-- let's finally draw the text to the window !\n\\t-- the draw_text function from `renderer` is an important function\n\\t-- as it is used to display any and all text inside of the editor\n\\t-- window\n\\trenderer.draw_text(style.code_font, message, x, y, config.plugins.simple.text_color)\n\\tend\nend\n-----------------------------------------------------------------------\n-- Let's allow the user to turn the message on and off\n-- we'll write a function to flip our \"show\" boolean variable.\nlocal function toggle_helloworld()\n\\tconfig.plugins.simple.show_my_message = not config.plugins.simple.show_my_message\nend\n-----------------------------------------------------------------------\n-- Finally, let's add the toggle function to the command list so that\n-- we can call it from the C-S-p command panel. Let's add one command\n-- to toggle the visibility of the message on and off and one to get\n-- the user's message and then display it.\ncommand.add(nil, {\n\\t-- Toggle the visibility of the message\n\\t[\"simple:toggle\"] = toggle_helloworld,\n\\t-- Set and show the message\n\\t-- This is the way to get user input through the command bar.\n\\t-- `core.command_view:enter` takes 2 arguments:\n\\t--\\t* the prompt to display before taking input\n\\t--\\t* a function that takes the \"input\" as its argument\n\\t-- (NOTE: here the variable we are reading input into is `text`)\n\\t[\"simple:setshow\"] = function()\n\\tcore.command_view:enter(\"Test to display\", {\n\\tsubmit = function(text)\n\\tconfig.plugins.simple.hw_message = text\n\\tconfig.plugins.simple.show_my_message = true\n\\tend\n\\t})\n\\tend\n})\n-----------------------------------------------------------------------\n-- Just for fun, let's assign our commands their own keybindings.\n-- Here, we assign the keybinding the same string(its name) as the one\n-- that we set while creating the command\nkeymap.add {\n\\t[\"alt+s\"] = \"simple:setshow\",\n\\t[\"alt+t\"] = \"simple:toggle\",\n}\nFurther reading\nLite: An Implementation Overview, an excellent post by rxi that stays mostly relevant to lite-xl.\nAPI overview, where some of the APIs are explained."},{"id":"en/tutorials/api-overview.html","title":"Lite XL - API Overview","category":["tutorials"],"content":"API Overview\nThis is a work in progress.\nHere we provide some resources and explanation to some API and aspects of Lite XL.\nFor API docs, it's available in the repo\nThus, we'll not explain everything, only the more important and frequently used features.\nBuilt-in APIs:\nProcess API\nSystem API\nRegex API"},{"id":"en/tutorials/index.html","title":"Lite XL - Tutorials","category":["tutorials"],"content":"Tutorials\nThese pages contain tutorials and documentations for building plugins in Lite XL.\nAPI Overview\nSimple Plugin\nSyntax Highlighting\nSystem Fonts"},{"id":"en/tutorials/overview/process.html","title":"Lite XL - Process API","category":["tutorials","overview"],"content":"Process API\nLite XL provides a process API to launch external applications. This API is meant to replace\nlua's io.popen and lite's pipe-to-a-file approach.\nAdvantages of this API includes:\nProper argument escaping (arguments are supplied via a table)\nNonblocking IO\nAble to detach processes from Lite XL (in progress)\nDoes not create temporary files\nMostly cross-platform (does not require special code for each shell)\nUsing the Process API\nError handling\nprocess.start() may throw errors if it cannot run the program.\nprocess.read* and process.write functions may throw errors if\nthe process ended\nthe process closed the stream\nyou closed the stream\nthere might be other errors to look forward to too\nStarting a process\nTo start a process, use process.start(args, options).\nHere are some of the more useful arguments.\nargs: The executable and any arguments, eg: { \"sh\", \"-c\", \"echo hello world\" }\noptions: Options for process.start()\nenv: A key-value table containing the env. Note that if this is provided,\n\\tenvironment variables will not be inherited.\nstdin: Specify where to redirect stdin\nstdout: Specify where to redirect stdout\nstderr: Specify where to redirect stderr\nfor options.std{in,out,err}, valid values are:\nprocess.REDIRECT_PIPE (Make it available to subprocess API for reading / writing)\nprocess.REDIRECT_DISCARD (Discard the output. Use this to prevent buffering)\nprocess.REDIRECT_STDOUT (stderr only, for redirecting stderr to stdout)\nReading from process\nTo read from stdout or stderr of a process, use process:read_stdout() and\nprocess:read_stderr() respectively.\nYou can specify a numeric argument to them, which will change the size of internal buffer used\nto read the output.\nAlternatively, you could use process:read() with process.STREAM_STDERR and process.STREAM_STDOUT.\nExample:\nlocal proc = process.start { \"sh\", \"-c\", \"echo hello world!\" }\n-- do not use `while proc:running()` if you care about output.\n-- The process could die and leave data in the buffer\n-- You should just read until `proc:read_stdout()` returns nil\nwhile true do\n\\tlocal rdbuf = proc:read_stdout()\n\\tif not rdbuf then break end\n\\t-- yay, output\nend\nWriting to process\nYou can use process:write(data) to write a string to stdin.\nChecking completion\nprocess:running() returns a boolean to indicate whether if the process is running.\nprocess:wait(time) also does the same thing, but you specify how long it should wait (or 0 to return immediately).\nTerminating process\nprocess:terminate() sends SIGTERM (or Windows equivalent) to the process.\nprocess:kill() sends SIGKILL (or Windows equivalent) to the progress.\nUse this only if process:terminate() cannot kill the process, as it can cause issues.\nMisc\nprocess:pid() returns the PID of the process.\nThere are no guarantees for this PID to be correct if the process terminated early.\nprocess:returncode() returns the exit code of the process, if any\nprocess:close_stream() closes stdin, stdout or stderr stream of the process."},{"id":"en/tutorials/overview/regex.html","title":"Lite XL - Regex API","category":["tutorials","overview"],"content":"Regex API\nThis API provides PCRE regular expressions for those who needs more power in matching text.\nThis API written in C and Lua.\nCreating a regex\nUse regex.compile(pattern, options) to compile a regex.\npattern: The regex pattern\noptions: regex modifiers as a string, eg \"im\"\n\"i\": Case-insensitive search\n\"m\": Multiline search\n\"s\": Match all characters with dot (.), including newlines.\nMatching\nLow level functions\nregex:cmatch(str, offset, options) low-level matching function\nstr: The string to match against\noffset: Where to start matching\noptions: A bit field of options\nregex.ANCHORED: Only match from the start of the string\nregex.ENDANCHORED: Only match from the end of the string\nregex.NOTBOL: String is not beginning of line\nregex.NOTEOL: String is not the end of line\nregex.NOTEMPTY: Do not match an empty string\nregex.NOTEMPTY_ATSTART: Do not match empty string at the start\nNote: regex:cmatch() returns wrong indexes (currently at version 2.0.2).\n\\tThe end index returned by regex:cmatch() is always off by 1 (-1 to get the actual end index).\nHigh level functions\nAll the functions below can be in 2 forms:\n- regex:fn(...) where regex is the compiled regex instance\n- regex.fn(pattern, ...) where pattern is a pattern string to be compiled and used directly.\nWe will only document the first form.\nregex:match(str, offset, options) high level matching function. This function accepts\nthe same arguments as regex:cmatch()\nregex:gsub(str, replacement) replaces matches in str with replacement.\nCapture groups are identified with \\\\0 to \\\\9, this might change in the future."},{"id":"en/tutorials/overview/system.html","title":"Lite XL - System API","category":["tutorials","overview"],"content":"System API\nThis is where Lite XL's lua code interact with its underlying C engine.\nSome of the functions here will be omitted because they're not useful for\nplugins.\nClipboard\nsystem.set_clipboard(text) sets the clipboard content.\nsystem.get_clipboard() retrieves the content of the clipboard.\nFile / Directory manipulation\nsystem.list_dir(dir) returns a list of filenames in a directory.\nsystem.rmdir(dir) removes a directory. Use this instead of os.remove().\nThe directory must be empty.\nsystem.chdir(dir) changes the current working directory (like cd).\nsystem.mkdir(dir) creates a new directory.\nIt does not recursively create directories.\nsystem.absolute_path(path) resolves the path components (.. and .) to an absolute path.\nsystem.get_file_info(path) returns info about a path.\nmodified: last modification time of the file in seconds since UNIX epoch.\nsize: file size in bytes.\ntype: Path type (\"file\" or \"dir\").\nTiming\nsystem.get_time() returns time in seconds (as floating point number) since Lite XL started.\nUse this instead of os.time() for higher precision timers.\nsystem.sleep(time) sleeps for time in milliseconds.\nDo not use this. Write asynchronous code.\nWindow manipulation\nsystem.set_window_opacity(o) sets the window opacity from 0 to 1.\nsystem.set_window_title(title) sets the window title.\nsystem.set_window_mode(mode) sets window mode:\n\"normal\": also known as \"restored\" on Windows.\n\"maximized\": Maximize the window.\n\"minimized\": Minimize the window.\n\"fullscreen\": Fullscreen\nsystem.set_window_bordered(bordered) enables or disable window border (decoration).\nsystem.set_window_hit_test(height, control_width, resize_border) sets window hit test (used for\nconfig.borderless to make custom drawn border interactable).\nIf no argument is supplied, reset the hit test values.\nheight: height of the title bar.\ncontrols_width: Not too sure about this, but it should be the size of the title bar controls\n(Maximize, Minimize and Normal buttons on the right).\nIt seems to be fixed at the right side of the title bar.\nresize_border: Number of pixels reserved for resizing the window.\n(setting this to a large value means that you can resize the window way easier)\nsystem.get_window_size() gets the window size.\nsystem.set_window_size(w, h, x, y) sets the window size (and also position).\nsystem.window_has_focus() checks whether the window is in focus.\nsystem.show_fatal_error(title, msg) shows an system error message box.\nUse nagview whenever possible.\nMisc\nsystem.exec(command) runs a command. Use the Process API instead of this.\nsystem.fuzzy_match(haystack, needle, file) generates a score depends on how close the needle\nmatches the haystack.\nfile: match backwards (more accurate for filename matching)."},{"id":"en/tutorials/system-fonts.html","title":"Lite XL - Using system fonts","category":["tutorials"],"content":"Using system fonts\nlite-xl does not provide a convenient way to use fonts on the system.\nThere is literally _different APIs for the each platforms we support (Windows, Linux and Mac).\nThis is where fontconfig comes to our rescue. fontconfig is\ninstallable on a lot of OSes.\nlite-xl has a fontconfig plugin that we can use to find system fonts.\nInstalling fontconfig\nWindows\nmingw-w64-fontconfig provides a build that can be used directly on Windows.\nDownload the file, extract it to somewhere and (optionally) add it to the PATH.\nLinux\nCheck your distro-specific instructions.\n# ubuntu / debian\napt install fontconfig\n# arch\npacman -Su fontconfig\n# fedora\ndnf install fontconfig\n...\nMacOS\nbrew install fontconfig\nSetting up\nInstall the plugin\nPut this in your user module:\nlocal fontconfig = require \"plugins.fontconfig\"\nfontconfig.use {\n\\tfont = { name = \"sans\", size = 13 * SCALE },\n\\tcode_font = { name = \"monospace\", size = 13 * SCALE }\n}\n\"sans\" and \"monospace\" can be any fontconfig syntax. (check \"Font Names\")\nNote that the font might not load immediately (because we need to wait for fc-match to return.\nIf you want that, replace fontconfig.use with fontconfig.use_blocking. Doing this will force\nlite-xl to wait for fc-match, which can be much slower."},{"id":"en/downloads.html","title":"Lite XL - Downloads","category":[],"content":"Downloads\nBinary packages\nBinary packages are available on the GitHub releases page.\nInstall via package management\nAlternatively, you can install lite-xl from your distribution's package manager.\nThese packages are maintained by the community and may be outdated.\nWindows (Chocolatey / Scoop)\nMac OS (MacPorts)\nArch Linux (AUR)\nNixOS (nixpkgs)\nFedora\nchoco install lite-xl\\t# chocolatey\nscoop bucket add extras && scoop install lite-xl\\t# scoop\nsudo port install lite-xl\\t# macports\nyay -S lite-xl\\t# or your favorite AUR helper\nnix-env -i lite-xl\\t# nixos\nsudo dnf install lite-xl # fedora\nSource Code\nSource code is available on GitHub, by downloading zip or tar archives,\nor directly via git:\ngit clone https://github.com/lite-xl/lite-xl.git"},{"id":"en/index.html","title":"Lite XL","category":[],"content":"Lite XL\nA lightweight, simple, fast, feature-filled, and extremely extensible text editor written in C, and Lua, adapted from lite.\nLite XL Editor /assets/img/editor.png"},{"id":"en/documentation/build.html","title":"Lite XL - Build","category":["documentation"],"content":"Build\nOnce you have downloaded the source code, you can build Lite XL yourself using Meson.\nIn addition, the build-packages.sh script can be used to compile Lite XL and\ncreate an OS-specific package for Linux, Windows or macOS.\nThe following libraries are required:\nfreetype2\nSDL2\nThe following libraries are optional:\nlibagg\nLua 5.2\nIf they are not found, they will be downloaded and compiled by Meson.\nOtherwise, if they are present, they will be used to compile Lite XL.\nBuild Script\nIf you compile Lite XL yourself,\nit is recommended to use the script build-packages.sh:\nbash build-packages.sh -h\nThe script will run Meson and create a tar compressed archive with the application or,\nfor Windows, a zip file. Lite XL can be easily installed\nby unpacking the archive in any directory of your choice.\nOn Windows two packages will be created, one called \"portable\" using the \"data\"\nfolder next to the executable and the other one using a unix-like file layout.\nBoth packages works correctly. The one with unix-like file layout is meant\nfor people using a unix-like shell and the command line.\nPlease note that there aren't any hard-coded directories in the executable,\nso that the package can be extracted and used in any directory.\nPortable\nWhen performing the meson setup command you may enable the -Dportable=true\noption to specify whether files should be installed as in a portable application.\nIf portable is enabled, Lite XL is built to use a data directory placed next\nto the executable.\nOtherwise, Lite XL will use unix-like directory locations.\nIn this case, the data directory will be $prefix/share/lite-xl\nand the executable will be located in $prefix/bin.\n$prefix is determined when the application starts as a directory such that\n$prefix/bin corresponds to the location of the executable.\nThe user directory does not depend on the portable option and will always be\n$HOME/.config/lite-xl.\n$HOME is determined from the corresponding environment variable.\nAs a special case on Windows the variable $USERPROFILE will be used instead.\nLinux\nOn Debian-based systems the required libraries and Meson can be installed\nusing the following commands:\n# To install the required libraries:\nsudo apt install libfreetype6-dev libsdl2-dev\n# To install Meson:\nsudo apt install meson\n# or pip3 install --user meson\nTo build Lite XL with Meson the commands below can be used:\nmeson setup --buildtype=release --prefix <prefix> build\nmeson compile -C build\nDESTDIR=\"$(pwd)/lite-xl\" meson install --skip-subprojects -C build\nwhere <prefix> depends on the OS you are using:\n- on Linux is /usr\n- on macOS application bundle can be \"/Lite XL.app\"\nIf you are using a version of Meson below 0.54\nyou need to use diffent commands to compile and install:\nmeson setup --buildtype=release build\nninja -C build\nninja -C build install\nmacOS\nmacOS is fully supported and a notarized app disk image is provided in the\nrelease page. \nIn addition the application can be compiled using the generic instructions given above.\nWindows MSYS2\nThe build environment chosen for Lite XL on Windows is MSYS2.\nFollow the install instructions in the link.\nOpen MinGW 64-bit or MinGW 32-bit shell from the start menu.\nUpdate the MSYS2 installation with pacman -Syu\nRestart the shell\nInstall the dependencies:\npacman -S \\\n\\t${MINGW_PACKAGE_PREFIX}-freetype \\\n\\t${MINGW_PACKAGE_PREFIX}-gcc \\\n\\t${MINGW_PACKAGE_PREFIX}-ninja \\\n\\t${MINGW_PACKAGE_PREFIX}-pcre2 \\\n\\t${MINGW_PACKAGE_PREFIX}-pkg-config \\\n\\t${MINGW_PACKAGE_PREFIX}-python-pip \\\n\\t${MINGW_PACKAGE_PREFIX}-SDL2\npip3 install meson\n${MINGW_PACKAGE_PREFIX} expands either to mingw-w64-i686 or mingw-w64-x86_64\ndepending if the current shell is 32 or 64 bit."},{"id":"en/documentation/usage.html","title":"Lite XL - Usage","category":["documentation"],"content":"Usage\nLite XL is a lightweight text editor written mostly in Lua — it aims to provide\nsomething practical, pretty, small and fast, implemented as simply as\npossible; easy to modify and extend, or to use without doing either.\nLite XL is based on the Lite editor and provide some enhancements\nwhile remaining generally compatible with it.\nGetting Started\nLite XL works using a project directory — this is the directory where your\nproject's code and other data resides.\nTo open a specific project directory the directory name can be passed\nas a command-line argument (. can be passed to use the current directory)\nor the directory can be dragged onto either the executable or a running instance.\nOnce started the project directory can be changed using the command\ncore:change-project-folder. The command will close all the documents\ncurrently opened and switch to the new project directory.\nIf you want to open a project directory in a new window the command\ncore:open-project-folder will open a new editor window with the selected\nproject directory.\nThe main way of opening files in Lite XL is through the core:find-file command\n— this provides a fuzzy finder over all of the project's files and can be\nopened using the ctrl+p shortcut by default.\nCommands can be run using keyboard shortcuts, or by using the core:find-command\ncommand bound to ctrl+shift+p by default. For example, pressing\nthe above combination and typing newdoc then pressing return\nwould open a new document. The current keyboard shortcut for a command\ncan be seen to the right of the command name on the command finder, thus to find\nthe shortcut for a command ctrl+shift+p can be pressed\nand the command name typed.\nUser Data Directories\nLite XL uses standard systems user directories; the user data can be found in\n$HOME/.config/lite-xl on Linux and macOS.\nOn Windows, the variable $USERPROFILE will be used instead of\n$HOME.\nUser Module\nLite XL can be configured through use of the user module. The user module can be\nused for changing options in the config module, adding additional key bindings,\nloading custom color themes, modifying the style or changing any other part of\nthe editor to your personal preference.\nThe user module is loaded when the application starts,\nafter the plugins have been loaded.\nThe user module can be modified by running the core:open-user-module command\nor otherwise directly opening the $HOME/.config/lite-xl/init.lua file.\nOn Windows, the variable $USERPROFILE will be used instead of\n$HOME.\ntl;dr:\nWindows: C:\\Users\\(username)\\.config\\lite-xl\\init.lua\nMacOS: /Users/(usernmame)/.config/lite-xl/init.lua\nLinux: /home/(username)/.config/lite-xl/init.lua\nThese aren't the exact location, but it gives you an idea where to find.\nPlease note that Lite XL differs from the standard Lite editor for the location\nof the user's module.\nProject Module\nThe project module is an optional module which is loaded from the current\nproject's directory when Lite XL is started. Project modules can be useful for\nthings like adding custom commands for project-specific build systems, or\nloading project-specific plugins.\nThe project module is loaded when the application starts,\nafter both the plugins and user module have been loaded.\nThe project module can be edited by running the core:open-project-module\ncommand — if the module does not exist for the current project when the\ncommand is run it will be created.\nAdd directories to a project\nIn addition to the project directories it is possible to add other directories\nusing the command core:add-directory.\nOnce added a directory it will be shown in the tree-view on the left side and\nthe additional files will be reachable using the ctrl+p command (find file).\nThe additonal files will be also visible when searching across the project.\nThe additional directories can be removed using the command core:remove-directory.\nWhen you will open again Lite XL on the same project folder the application will\nremember your workspace including the additonal project directories.\nSince version 1.15 Lite XL does not need a workspace plugin as it is now\nbundled with the editor.\nCreate new empty directory\nUsing the command files:create-directory or control-click in a directory in the\ntree-view to create a new empty subdirectory.\nCommands\nCommands are used both through the command finder (ctrl+shift+p) and\nby Lite XL's keyboard shortcut system. Commands consist of 3 components:\nName — The command name in the form of namespace:action-name, for\nexample: doc:select-all\nPredicate — A function that returns true if the command can be ran, for\nexample, for any document commands the predicate checks whether the active\nview is a document\nFunction — The function which performs the command itself\nCommands can be added using the command.add function provided by the\ncore.command module:\nlocal core = require \"core\"\nlocal command = require \"core.command\"\ncommand.add(\"core.docview\", {\n\\t[\"doc:save\"] = function()\n\\tcore.active_view.doc:save()\n\\tcore.log(\"Saved '%s', core.active_view.doc.filename)\n\\tend\n})\nCommands can be performed programatically (eg. from another command or by your\nuser module) by calling the command.perform function after requiring the\ncommand module:\nlocal command = require \"core.command\"\ncommand.perform \"core:quit\"\nKeymap\nAll keyboard shortcuts are handled by the core.keymap module.\nA key binding maps a \"stroke\" (eg. ctrl+q) to one or more commands\n(eg. core:quit). When the shortcut is pressed Lite XL will iterate each command\nassigned to that key and run the predicate function for that command — if the\npredicate passes it stops iterating and runs the command.\nAn example of where this used is the default binding of the tab key:\n\\t[\"tab\"] = { \"command:complete\", \"doc:indent\" },\nWhen tab is pressed the command:complete command is attempted which will only\nsucceed if the command-input at the bottom of the window is active. Otherwise\nthe doc:indent command is attempted which will only succeed if we have a\ndocument as our active view.\nA new mapping can be added by your user module as follows:\nlocal keymap = require \"core.keymap\"\nkeymap.add { [\"ctrl+q\"] = \"core:quit\" }\nA list of default mappings can be viewed here.\nGlobal variables\nThere are a few global variables set by the editor.\nThese variables are available everywhere and shouldn't be overwritten.\nARGS: command-line arguments. argv[1] is the program name, argv[2] is the 1st parameter, ...\nPLATFORM: Output from SDL_GetPlatform(). Can be Windows, Mac OS X, Linux, iOS and Android.\nSCALE: Font scale. Usually 1, but can be higher on HiDPI systems.\nEXEFILE: An absolute path to the executable.\nEXEDIR: The executable directory. DO NOT WRITE TO THIS DIRECTORY.\nVERSION: lite-xl version.\nMOD_VERSION: mod-version used in plugins. This is usually incremented when there are API changes.\nPATHSEP: Path seperator. \\ (Windows) or / (Other OSes)\nDATADIR: The data directory, where the Lua part of lite-xl resides. DO NOT WRITE TO THIS DIRECTORY.\nUSERDIR: User configuration directory.\nUSERDIR should be used instead of DATADIR when configuring the editor\nbecause DATADIR might not be writable.\n(for example, if the editor is installed in /usr, DATADIR will be /usr/share/lite-xl!)\nUSERDIR on the other hand should always be writable for the user, and allows multiple users to customize\ntheir own editor.\nPlugins\nPlugins in Lite XL are normal lua modules and are treated as such — no\ncomplicated plugin manager is provided, and, once a plugin is loaded, it is never\nexpected be to have to unload itself.\nTo install a plugin simply drop it in the plugins directory in the user\nmodule directory.\nWhen Lite XL starts it will first load the plugins included in the data directory\nand will then loads the plugins located in the user module directory.\nTo uninstall a plugin the plugin file can be deleted — any plugin\n(including those included with the default installation)\ncan be deleted to remove its functionality.\nIf you want to load a plugin only under a certain circumstance (for example,\nonly on a given project) the plugin can be placed somewhere other than the\nplugins directory so that it is not automatically loaded. The plugin can\nthen be loaded manually as needed by using the require function.\nPlugins can be downloaded from the plugins repository.\nRestarting the editor\nIf you modify the user configuration file or some of the Lua implementation files\nyou may restart the editor using the command core:restart.\nThe entire application will be restarting by keeping the window that is already in use.\nColor Themes\nColors themes in Lite XL are lua modules which overwrite the color fields of\nLite XL's core.style module.\nPre-defined color methods are located in the colors folder in the data directory.\nAdditional color themes can be installed in the user's directory in a folder named\ncolors.\nA color theme can be set by requiring it in your user module:\ncore.reload_module \"colors.winter\"\nIn the Lite editor the function require is used instead of core.reload_module.\nIn Lite XL core.reload_module should be used to ensure that the color module\nis actually reloaded when saving the user's configuration file.\nColor themes can be downloaded from the color themes repository.\nThey are included with Lite XL release packages."},{"id":"en/documentation/keymap.html","title":"Lite XL - Default Keymap","category":["documentation"],"content":"Default Keymap\nKeymaps on different operating systems have the same functionality, just bound slightly differently\nin order to conform to normal expectations for that operating system.\nCurrently, there are only two operating system layouts. MacOS, and everything else.\nKeymap\nKey Combination\tActions\nalt+1\troot:switch-to-tab-1\nalt+2\troot:switch-to-tab-2\nalt+3\troot:switch-to-tab-3\nalt+4\troot:switch-to-tab-4\nalt+5\troot:switch-to-tab-5\nalt+6\troot:switch-to-tab-6\nalt+7\troot:switch-to-tab-7\nalt+8\troot:switch-to-tab-8\nalt+9\troot:switch-to-tab-9\nalt+i\troot:switch-to-up\nalt+j\troot:switch-to-left\nalt+k\troot:switch-to-down\nalt+l\troot:switch-to-right\nalt+return\tcore:toggle-fullscreen\nalt+shift+i\troot:split-up\nalt+shift+j\troot:split-left\nalt+shift+k\troot:split-down\nalt+shift+l\troot:split-right\nctrl+/\tdoc:toggle-line-comments\nctrl+1lclick\tdoc:split-cursor\nctrl+[\tdoc:move-to-previous-block-start\nctrl+]\tdoc:move-to-next-block-end\nctrl+a\tdoc:select-all\nctrl+backspace\tdoc:delete-to-previous-word-start\nctrl+c\tdoc:copy\nctrl+d\tdoc:select-word\nctrl+d\tfind-replace:select-add-next\nctrl+delete\tdoc:delete-to-next-word-end\nctrl+down\tdoc:move-lines-down\nctrl+end\tdoc:move-to-end-of-doc\nctrl+f3\tfind-replace:select-next\nctrl+f\tfind-replace:find\nctrl+g\tdoc:go-to-line\nctrl+home\tdoc:move-to-start-of-doc\nctrl+i\tfind-replace:toggle-sensitivity\nctrl+insert\tdoc:copy\nctrl+j\tdoc:join-lines\nctrl+l\tdoc:select-lines\nctrl+left\tdoc:move-to-previous-word-start\nctrl+n\tcore:new-doc\nctrl+o\tcore:open-file\nctrl+p\tcore:find-file\nctrl+pagedown\troot:move-tab-right\nctrl+pageup\troot:move-tab-left\nctrl+r\tfind-replace:replace\nctrl+return\tdoc:newline-below\nctrl+right\tdoc:move-to-next-word-end\nctrl+s\tdoc:save\nctrl+shift+[\tdoc:select-to-previous-block-start\nctrl+shift+]\tdoc:select-to-next-block-end\nctrl+shift+backspace\tdoc:delete-to-previous-word-start\nctrl+shift+c\tcore:change-project-folder\nctrl+shift+d\tdoc:duplicate-lines\nctrl+shift+delete\tdoc:delete-to-next-word-end\nctrl+shift+down\tdoc:create-cursor-next-line\nctrl+shift+end\tdoc:select-to-end-of-doc\nctrl+shift+f3\tfind-replace:select-previous\nctrl+shift+home\tdoc:select-to-start-of-doc\nctrl+shift+i\tfind-replace:toggle-regex\nctrl+shift+k\tdoc:delete-lines\nctrl+shift+l\tdoc:select-word\nctrl+shift+l\tfind-replace:select-add-all\nctrl+shift+left\tdoc:select-to-previous-word-start\nctrl+shift+o\tcore:open-project-folder\nctrl+shift+p\tcore:find-command\nctrl+shift+return\tdoc:newline-above\nctrl+shift+right\tdoc:select-to-next-word-end\nctrl+shift+s\tdoc:save-as\nctrl+shift+tab\troot:switch-to-previous-tab\nctrl+shift+up\tdoc:create-cursor-previous-line\nctrl+tab\troot:switch-to-next-tab\nctrl+up\tdoc:move-lines-up\nctrl+v\tdoc:paste\nctrl+w\troot:close\nctrl+x\tdoc:cut\nctrl+y\tdoc:redo\nctrl+z\tdoc:undo\nf11\tcore:toggle-fullscreen\nf3\tfind-replace:repeat-find\nshift+f3\tfind-replace:previous-find"},{"id":"en/documentation/index.html","title":"Lite XL - Documentation","category":["documentation"],"content":"Documentation\nThese pages contain documentation to build, run and use Lite XL.\nBuild\nKeymap (MacOS)\nKeymap\nUsage"},{"id":"en/documentation/keymap-macos.html","title":"Lite XL - MacOS Keymap","category":["documentation"],"content":"MacOS Keymap\nKeymaps on different operating systems have the same functionality, just bound slightly differently\nin order to conform to normal expectations for that operating system.\nCurrently, there are only two operating system layouts. MacOS, and everything else.\nKeymap\nKey Combination\tActions\ncmd+/\tdoc:toggle-line-comments\ncmd+1\troot:switch-to-tab-1\ncmd+2\troot:switch-to-tab-2\ncmd+3\troot:switch-to-tab-3\ncmd+4\troot:switch-to-tab-4\ncmd+5\troot:switch-to-tab-5\ncmd+6\troot:switch-to-tab-6\ncmd+7\troot:switch-to-tab-7\ncmd+8\troot:switch-to-tab-8\ncmd+9\troot:switch-to-tab-9\ncmd+[\tdoc:move-to-previous-block-start\ncmd+]\tdoc:move-to-next-block-end\ncmd+a\tdoc:select-all\ncmd+backspace\tdoc:delete-to-start-of-indentation\ncmd+c\tdoc:copy\ncmd+ctrl+i\troot:switch-to-up\ncmd+ctrl+j\troot:switch-to-left\ncmd+ctrl+k\troot:switch-to-down\ncmd+ctrl+l\troot:switch-to-right\ncmd+ctrl+return\tcore:toggle-fullscreen\ncmd+ctrl+shift+i\troot:split-up\ncmd+ctrl+shift+j\troot:split-left\ncmd+ctrl+shift+k\troot:split-down\ncmd+ctrl+shift+l\troot:split-right\ncmd+d\tdoc:select-word\ncmd+d\tfind-replace:select-add-next\ncmd+delete\tdoc:delete-to-end-of-line\ncmd+down\tdoc:move-to-end-of-doc\ncmd+f3\tfind-replace:select-next\ncmd+f\tfind-replace:find\ncmd+g\tdoc:go-to-line\ncmd+j\tdoc:join-lines\ncmd+l\tdoc:select-lines\ncmd+left\tdoc:move-to-start-of-indentation\ncmd+n\tcore:new-doc\ncmd+o\tcore:open-file\ncmd+option+down\tdoc:create-cursor-next-line\ncmd+option+up\tdoc:create-cursor-previous-line\ncmd+p\tcore:find-file\ncmd+pagedown\troot:move-tab-right\ncmd+pageup\troot:move-tab-left\ncmd+r\tfind-replace:replace\ncmd+return\tdoc:newline-below\ncmd+right\tdoc:move-to-end-of-line\ncmd+s\tdoc:save\ncmd+shift+[\tdoc:select-to-previous-block-start\ncmd+shift+]\tdoc:select-to-next-block-end\ncmd+shift+backspace\tdoc:delete-to-previous-word-start\ncmd+shift+c\tcore:change-project-folder\ncmd+shift+d\tdoc:duplicate-lines\ncmd+shift+delete\tdoc:delete-to-next-word-end\ncmd+shift+down\tdoc:select-to-end-of-doc\ncmd+shift+k\tdoc:delete-lines\ncmd+shift+l\tdoc:select-word\ncmd+shift+l\tfind-replace:select-add-all\ncmd+shift+left\tdoc:select-to-start-of-indentation\ncmd+shift+o\tcore:open-project-folder\ncmd+shift+p\tcore:find-command\ncmd+shift+return\tdoc:newline-above\ncmd+shift+right\tdoc:select-to-end-of-line\ncmd+shift+s\tdoc:save-as\ncmd+shift+up\tdoc:select-to-start-of-doc\ncmd+up\tdoc:move-to-start-of-doc\ncmd+v\tdoc:paste\ncmd+w\troot:close-or-quit\ncmd+x\tdoc:cut\ncmd+y\tdoc:redo\ncmd+z\tdoc:undo\nctrl+1lclick\tdoc:split-cursor\nctrl+insert\tdoc:copy\nctrl+shift+tab\troot:switch-to-previous-tab\nctrl+tab\troot:switch-to-next-tab\nf3\tfind-replace:repeat-find\noption+backspace\tdoc:delete-to-previous-word-start\noption+delete\tdoc:delete-to-next-word-end\noption+down\tdoc:move-lines-down\noption+left\tdoc:move-to-previous-word-start\noption+right\tdoc:move-to-next-word-end\noption+shift+left\tdoc:select-to-previous-word-start\noption+shift+right\tdoc:select-to-next-word-end\noption+up\tdoc:move-lines-up\nshift+f3\tfind-replace:previous-find"}]